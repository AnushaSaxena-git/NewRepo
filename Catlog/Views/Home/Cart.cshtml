@{
    ViewData["Title"] = "Cart";
    Layout = "_Layout1";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css">

<div class="container mt-5">
    <h2 class="mb-4">Your Shopping Cart</h2>

    <!-- Cart Table -->
    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Image</th>
                <th scope="col">Product Name</th>
                <th scope="col">Size</th>
                <th scope="col">Material</th>
                <th scope="col">Color</th> <!-- Added Color Column -->
                <th scope="col">Quantity</th>
                <th scope="col">Price</th>
                <th scope="col">Total</th>
                <th scope="col">Action</th>
            </tr>
        </thead>

        <tbody id="table-body">
            @if (Model.Count == 0)
            {
                <tr><td colspan="7">No items found in the cart</td></tr>
            }
        </tbody>
    </table>

    <!-- Cart Summary -->
    <div>
        <form asp-action="Checkout" method="get" style="display:inline-block;">
            <button id="checkoutButton" type="submit" class="btn btn-primary" style="margin-left: 10px;background-color:dimgrey;display:inline-block;" disabled>Proceed to Checkout <i class="bi bi-cart"></i></button>
        </form>
        <form asp-action="Index" method="get" style="display:inline-block;">
            <button id="continueShoppingButton" type="submit" class="btn btn-primary" style="margin-left: 10px;background-color:dimgrey">Continue Shopping <i class="bi bi-cart"></i></button>
        </form>
    </div>

    <!-- Clear Cart Button -->
    <button id="clearCart" type="button" class="btn btn-danger mt-3" disabled>Clear Cart</button>
</div>

<!-- Navbar for Cart Count -->
<li class="nav-item dropdown">
    <a asp-action="Cart" asp-controller="Home" class="nav-link">
        <div>
            @* <span id="cartCount">@ViewBag.CartCount</span> items in cart *@
        </div>
        @* <span class="navbar-badge badge text-bg-warning"></span> *@
    </a>
</li>

<script>
    // Utility function to get cookies
    function getCookie(name) {
        const match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
        return match ? match[2] : null;
    }

    // Sanitize cart data before saving to cookie
    function sanitizeCart(cart) {
        return cart.map(item => {
            item.size = (item.size && typeof item.size === 'string') ? item.size : 'N/A';
            item.quantity = item.quantity || 1;
            item.price = item.price || 0;
            item.skuId = item.skuId || 0;
            item.productTitle = item.productTitle || 'No Title';
            item.stockQuantity = item.stockQuantity || 0;
            item.imageName = item.imageName || 'default.jpg';
            return item;
        });
    }

    // Function to set cookies with sanitized data
    function setCookie(name, value, days) {
        const date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        const expires = "; expires=" + date.toUTCString();
        const cookieOptions = "; path=/; Secure; SameSite=Strict";
        const sanitizedCartData = sanitizeCart(value);
        const serializedCartData = JSON.stringify(sanitizedCartData);
        document.cookie = `${name}=${encodeURIComponent(serializedCartData)}${expires}${cookieOptions}`;
    }

    // Function to get cart data from cookie
    const getCart = () => {
        const encodedData = getCookie("Cart");
        if (encodedData == null) return [];

        try {
            const decodedData = decodeURIComponent(encodedData);
            const cart = JSON.parse(decodedData);
            return sanitizeCart(cart);
        } catch (error) {
            console.error("Failed to parse cart data:", error);
            return [];
        }
    }

    // Function to update cart count
    function updateCartCount(cart) {
        // Calculate the total number of items in the cart
        const cartCount = cart.reduce((total, item) => total + item.quantity, 0);

        // Get the elements to update
        const cartCountElement = document.getElementById('cartCount');
        const cartBadgeElement = document.querySelector('.navbar-badge');

        // Ensure cartCount is a valid number
        if (typeof cartCount !== 'number') {
            console.error('Cart count is not a number:', cartCount);
            return;
        }

        // Update the cart count in the elements
        if (cartCountElement) {
            cartCountElement.textContent = `${cartCount} `;
        }

        if (cartBadgeElement) {
            cartBadgeElement.textContent = cartCount > 0 ? cartCount : '';
        }

        // Enable/Disable buttons based on cart count
        const checkoutButton = document.getElementById("checkoutButton");
        const clearCartButton = document.getElementById("clearCart");

        if (cartCount > 0) {
            checkoutButton.disabled = false;
            clearCartButton.disabled = false;
        } else {
            checkoutButton.disabled = true;
            clearCartButton.disabled = true;
        }
    }

    // Function to update quantity in the cart
    function updateQuantity(skuId, quantity) {
        var cart = getCart();
        if (cart == null) return;

        var index = cart.findIndex(x => x.skuId == skuId);
        if (index == -1) return;

        var stockQuantity = cart[index].stockQuantity;

        if (quantity == 0) {
            if (cart[index].quantity > 1) {
                cart[index].quantity -= 1;
            }
        } else {
            if (cart[index].quantity < stockQuantity) {
                cart[index].quantity += 1;
            }
        }

        setCookie("Cart", cart, 7); // Save updated cart to cookie
        generateCartRows(cart); // Regenerate the cart rows to reflect changes
        updateCartCount(cart); // Update the cart count
    }

    // Function to generate cart table rows
        // Function to generate cart table rows
    function generateCartRows(cartItems) {
        const cartBody = document.getElementById("table-body");
        cartBody.innerHTML = ""; // Clear any existing rows

        cartItems.forEach(item => {
            const row = document.createElement('tr');
            row.id = `item-row-${item.skuId}`;

            // Image Cell
            const imageCell = document.createElement('td');
            const imagePath = item.imageName ? `/images/${item.imageName}` : '/images/default.jpg';
            imageCell.innerHTML = `<img src="${imagePath}" alt="Product Image" class="img-fluid" style="width: 50px;" onerror="this.onerror=null; this.src='/images/default.jpg'">`;

            // Title (SKU Name) Cell
            const titleCell = document.createElement('td');
            titleCell.textContent = item.skuName || 'No Title';  // SKU Name

            // Size Cell
            const sizeCell = document.createElement('td');
            sizeCell.textContent = item.size || 'N/A';  // Size

            // Material Cell
            const materialCell = document.createElement('td');
            materialCell.textContent = item.material || 'N/A';  // Material

            // **Color Cell (NEW)**
            const colorCell = document.createElement('td');
            colorCell.textContent = item.color || 'N/A';  // Color

            // Quantity Cell
            const quantityCell = document.createElement('td');
            quantityCell.innerHTML = `
                <div class="d-flex justify-content-center">
                    <button class="btn btn-sm btn-secondary" style="background-color:white;color:black;" onclick="updateQuantity(${item.skuId}, 0)">-</button>
                    <input type="number" value="${item.quantity || 1}" min="1" max="${item.stockQuantity}" id="quantity_${item.skuId}" class="form-control d-inline-block w-auto mx-2" style="width: 60px;" onchange="updateQuantity(${item.skuId}, this.value)">
                    <button class="btn btn-sm btn-secondary" style="background-color:white;color:black;" onclick="updateQuantity(${item.skuId}, 1)">+</button>
                </div>
            `;

            // Price Cell
            const priceCell = document.createElement('td');
            priceCell.classList.add("text-right");
            priceCell.textContent = `$${(item.price || 0).toFixed(2)}`;

            // Total Cell (Price * Quantity)
            const totalCell = document.createElement('td');
            totalCell.classList.add("text-right");
            totalCell.textContent = `$${(item.price * (item.quantity || 1)).toFixed(2)}`;

            // Action (Remove Item) Cell
            const actionCell = document.createElement('td');
            actionCell.innerHTML = `
                <button class="btn btn-danger btn-sm" onclick="removeItem(${item.skuId})">
                    <i class="bi bi-trash2-fill"></i>
                </button>
            `;

            // Append the cells to the row
            row.appendChild(imageCell);
            row.appendChild(titleCell);
            row.appendChild(sizeCell);
            row.appendChild(materialCell);
            row.appendChild(colorCell);  // **Added Color Column**
            row.appendChild(quantityCell);
            row.appendChild(priceCell);
            row.appendChild(totalCell);
            row.appendChild(actionCell);

            // Append the row to the table body
            cartBody.appendChild(row);
        });
    }


    function removeItem(skuId) {
        if (confirm('Are you sure you want to remove this item from the cart?')) {
            var cart = getCart();
            if (cart == null) return;

            cart = cart.filter(item => item.skuId !== skuId);
            setCookie("Cart", cart, 7);
            generateCartRows(cart);
            updateCartCount(cart);
        }
    }

    // Function to clear the entire cart
    function clearCart() {
        document.cookie = "Cart=; path=/; max-age=0"; // Expire the cookie
        generateCartRows([]); // Clear the cart in the UI
        updateCartCount([]);  // Update cart count to 0
    }

    // When the document is loaded, check the cart and generate the table rows
    document.addEventListener("DOMContentLoaded", function () {
        const cart = getCart();

        if (cart && cart.length > 0) {
            generateCartRows(cart);
            updateCartCount(cart);
        } else {
            document.getElementById("table-body").innerHTML = "<tr><td colspan='7' class='text-center'>Your cart is empty.</td></tr>";
            updateCartCount([]);
        }

        // Clear Cart Button
        document.getElementById("clearCart").addEventListener("click", function () {
            clearCart();
        });
    });
</script>
